datasource bd {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider      = "prisma-client-js"
    engineType    = "library"
    binaryTargets = ["native", "darwin", "darwin-arm64"]
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    password      String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]

    // Stripe
    stripeCustomerId String? @unique

    // Relations
    subscriptions Subscription[]
    Post          Post[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    role UserRole @default(USER)
}

enum PlanTier {
    SOLO
    TEAM
    RENTAL_FLEET
    MULTI_LOCATION
    CUSTOM
}

enum SubStatus {
    active
    trialing
    past_due
    canceled
    unpaid
}

model Subscription {
    id     String @id @default(cuid())
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Stripe identifiers
    stripeSubscriptionId String @unique
    stripePriceId        String

    // Business fields
    planTier   PlanTier
    status     SubStatus
    unitAmount Int // cents (denormalized from the Stripe Price used)
    currency   String    @default("USD")

    currentPeriodEnd  DateTime?
    cancelAtPeriodEnd Boolean   @default(false)
    setupFeePaidAt    DateTime? // set when $500 upfront is collected

    // Optional free-form details (e.g., fleet size, location count) if you want:
    meta Json?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId, status])
    @@index([status, currentPeriodEnd])
}

model Account {
    // required by NextAuth adapter ↓↓↓↓↓
    id String @id @default(cuid())

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    type              String
    provider          String
    providerAccountId String

    refresh_token String?
    access_token  String?
    expires_at    Int?
    token_type    String?
    scope         String?
    id_token      String?
    session_state String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([provider, providerAccountId])
}

model EmailVerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model Post {
    id          String    @id @default(cuid())
    title       String
    slug        String    @unique
    excerpt     String?
    content     String // sanitized HTML from TipTap
    coverImage  String?
    published   Boolean   @default(false)
    publishedAt DateTime?
    authorId    String
    author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([published, publishedAt])
}

enum UserRole {
    ADMIN
    USER
}
